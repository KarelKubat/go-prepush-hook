#!/usr/bin/env perl

# Pre-push hook for Go projects that end up on github.
# 
# Each directory must have a doc.go.
# For each .go file, a _test.go must exist.
# In each directory, `go test` is run.
# In each directory, `godocdown` is run.

use strict;
use Cwd;
use File::Compare;
use File::Copy;
use File::Find;

my %dirs;					# dirs visited 
my %errs;		       			# errors found
my $hookname = '.git/hooks/pre-push';   	# name of prepush hook
my $godocdown = findbin('godocdown');   	# do we have `godocdown`
my $golint = findbin('golint');         	# do we have `golint`
my $golangci_lint = findbin('golangci-lint');   # do we have `golangci_lint`

sub findbin {
    my $bin = shift;
    for my $e (split(/:/, $ENV{PATH})) {
	return "$e/$bin" if (-x "$e/$bin");
    }
    return undef;
}

sub checkerrs {
    my $errfound = 0;
    for my $k (sort(keys(%errs))) {
	++$errfound;
	print STDERR ("pre-push error: $k\n");
    }
    if ($errfound) {
	print STDERR ("$errfound missing so far, stopping\n");
	exit(1);
    }
}

sub wanted {
    my $basefile = $_;
    my $dir = $File::Find::dir;
    my $file = $File::Find::name;

    # Keep out of dirs where you should not go.
    return if ($dir =~ m{.git});

    # Ignore _test.go files
    return if ($file =~ m{_test.go$});

    $dirs{$dir} = 1;

    # Directories must have a doc.go.
    $errs{"Missing $dir/doc.go"} = 1 unless (-f "doc.go");
	  
    # Go files must have a _test.go
    if ($file =~ m{.go$}) {
	my $testfile = $basefile;
	$testfile =~ s{.go$}{_test.go};
	my $fulltest = $file;
	$fulltest =~ s{.go$}{_test.go};
	$errs{"Missing $fulltest (test for $file)"} = 1 unless (-f $testfile);
    }
}

sub run_prepush_checks {
    # Check all subdirs for _test.go and doc.go presence
    find(\&wanted, ("."));
    checkerrs();

    # In all directories, run `go test` and run `godocdown` if we have it.
    my $readme_modified = 0;
    my $wd = getcwd();
    for my $d (sort(keys(%dirs))) {
	chdir($d) || die("Cannot cd into $d: $!\n");
	
	print("Running tests in $d\n");
	system("go test") and $errs{"Failed 'go test' in $d"} = 1;

	if ($godocdown) {
	    if (! -f "README.md") {
		$readme_modified++;
		print("Generating $d/README.md\n");	
		system("$godocdown . > README.md")
		  and $errs{"failed 'godocdown' in $d"} = 1;
	    } else {
		unlink("README.prev");
		rename("README.md", "README.prev")
		  or die("Failed to rename README.md to .prev: $!\n");
		if (system("$godocdown . > README.md")) {
		    $errs{"failed 'godocdown' in $d"} = 1;
		} else {
		    if (compare("README.md", "README.prev")) {
			$readme_modified++;
			print("Regenerated $d/README.md\n");
		    }
		}
		unlink("README.prev") or die("Cannot unlink README.prev: $!\n");
	    }
	}

	if ($golint) {
	    system("golint --set_exit_status .")
	      and $errs{"Failed golint in $d"} = 1;
	} elsif ($golangci_lint) {
	    system("$golangci_lint run")
	      and $errs{"Failed golangci_lint in $d"} = 1;
	}
	chdir($wd) || die("Cannot cd back into $wd: $!\n");
    }
    checkerrs();

    if ($readme_modified > 0) {
	print STDERR ("$readme_modified README.md's were (re)generated.\n",
		      "Please re-run 'git commit and 'git push'.\n",
		      "Sorry for the inconvenience.\n");
	exit(1);
    }

    print("\nNo README.md's could be generated. You should\n",
	  "  go get github.com/robertkrimen/godocdown/godocdown\n",
	  "and make sure that it's in your path.\n") unless ($godocdown);
    print("\nNeither golint nor golangci-lint were found. You should\n",
	  "  go get -u golang.org/x/lint/golint",
	  "or\n",
	  "  go get -u github.com/golangci/golangci-lint/cmd/golangci-lint\n",
	  "so that next time a linter can be included in the checks.\n");
}

sub install_self {
    die("You are not in a git repository (no .git found here)\n")
      unless (-d ".git");

    if (-f $hookname) {
	die("This pre-push hook is already present here\n")
	  unless (compare($0, $hookname));
	die("There is already a $hookname here.\n",
	    "Check what that file is, I won't overwrite it.\n")
    }
     
    copy($0, $hookname) or die("Failed to copy self to $hookname: $!\n");
    chmod(0755, $hookname) or die("Failed to make $hookname executable: $!\n");

    print("Pre-push hook installed.\n");
}

sub uninstall_self {
    die("You are not in a git repository (no .git found here)\n")
      unless (-d ".git");
    die("There is no $hookname in this repository\n")
      unless (-f $hookname);
    die ("$hookname differs, that's not me.\n",
	 "Check what that file is, I won't delete it.\n")
      if (compare($0, $hookname));
    unlink($hookname)
      or die("Failed to remove $hookname: $!\n");

    print("Pre-push hook uninstalled.\n");
}

### main
if ($ARGV[0] eq "install") {
    install_self();
} elsif ($ARGV[0] eq "uninstall") {
    uninstall_self();
} else {
    run_prepush_checks();
}
